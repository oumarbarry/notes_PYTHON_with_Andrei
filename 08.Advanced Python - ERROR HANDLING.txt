Python Error Handling:
	Errors in Python:
		error in Python is called an exception
			and Python raises these exceptions whenever the interpreter says 
				hey i have no idea what you're doing, something is wrong, i don't know what i'm doing anymore
					i'm going to stop whatever i'm doing and give you an output
					
		error handling allows us to let the python script continue running even if there are errors
		
		python docs: Built-in Exceptions
		some of them:
			SyntaxError
			ZeroDivisionError
			ValueError
			NameError: raised when a varible or a function..when a name is undefined in the code
			IndexError: raised when the index of a list doesn't exist
			KeyError: raised when the key of the dictionnary doesn't exist
	
	Error Handling: 
		try:
			#code_to_test
		except NameOfError as error:
			#do something when the specified NameOfError get caught like
			#print(error)
		except AnotherErrorName:
			#if an error is caught only one except block is run, like with if..elif
		except:
			#do something for all other kind of errors
		else:
			#do something when there is no raised error
		finally:
			#do something if there is error or not
			#this part will always always run at the end of the try,except,else block statement
		
		examples:
			while True:
				try:
					age = int(input("what's your age ? "))
					raise Exception('boo boo something badly wrong')
				except ValueError:
					print("numbers are required")
				else:
					print(age)
					break
				finally:
					print('even we have break statement in the else block, finally will runs after')
				
			def divv(num1, num2):
				try:
					return num1/num2
				except (TypeError, ZeroDivisionError) as err:
					print(err)
					
		Error are unavoidable in programming,
			so our job as programmers is to be able to anticipate these errors, these bugs, these exceptions
				and handle them properly, gracefully in our programs
			