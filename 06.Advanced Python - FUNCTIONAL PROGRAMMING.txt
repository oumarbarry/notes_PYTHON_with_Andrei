Functional Programming:
	What is Functional Programming ? 
		it's all about separation of concerns which OOP does as well, but it separate data and actions/functions
		so it's the idea of keeping data and actions separate,
			so we can focus on pure functions and we can focus on data
			
		it's all about packaging our code into separate chuncks 
			so everything is well organized in each part of our code 
				and each part is organized in a way that make sense based on functionality
				
		the goal of functional programming as OOP goal is to make code:
			clear and understandable,
			easy to extend,
			easy to maintain,
			memory efficient,
			and finally DRY
			
		One Pillar: Concept of Pure Functions
		
	Pure Functions:
		A pure function has 2 rules:
			- first is that given the same input, it will always return the same output
			- second point is this idea of a function should not produce any side effects
				side effects are things that a function does, 
					that affects his outside world i.e his parent scope or the global scope
		
		with pure functions we have less buggy code, code is easier to test, to understand
			and we have we have these benefits of not having different parts of code touching each other
				and affect each other which makes life as programmer so much easier
				
		but remenber pure functions is more of a guideline that an absolute
			because it's impossible to have pure functions everywhere
				because yes, some functions must affect the outside otherwise we wouldn't have any programs
	
		so try to create pure functions and only have few non pure functions
		
	map, filter, zip and reduce: are good representation of pure functions
		map(function, *iterables)
			example:
				def times2(item):
					return item*2
				print(list( map(times2, [1,2,3]) )) -> will output [2,4,6]
				
		filter(function, *iterables)
			example:
				def is_odd(item):
					return item%2 != 0
				print(list( filter(is_odd, [1,2,3,4]) )) -> output: [1,3]
				
		zip(iterable1, iterable2, ..., iterableN)
			example:
				list1 = [1,2,3]
				list2 = [9,8,7]
				print(list( zip(list1, list2) )) -> output: [(1,9), (2,8), (3,7)]
		
		reduce(function, data, initial)
			example:
				from functools import reduce
				def accumulator(receiver_of_initial, item):
					return receiver_of_initial + item
				print( reduce(accumulator, [1,2,3]), 10) ) -> 16
				
				
	Lambda Expressions:
		lambda function in python is equivalent to anonymous function in other language
		
		lambda func is defined as one time anonymous func that you don't need more than once
		anonymous functions: 
			they're just like normal functions and even behave equally
				but we only use them once and they don't have a name
			
			
		lambda param_s: action_on_param_s
			example:
				print(list(map( lambda item: item*2, [1,2,3] ))) -> output: [2,4,6]
				
				print(list(filter( lambda item: item%2 !=0, [1,2,3,4] ))) -> output: [1,3]
				
				print(reduce( lambda acc, item: acc+item, [1,2,3], 0 )) -> output: 6
				
				List Sorting (how to sort with the tuple second item):
					my_list = [(0,2), (4,3), (9,9), (10,-1)]
					
					my_list.sort(key = lambda t: t[1])
					
	
	Comprehensions: 
		when we talk about comprehensions we talk about list, set and dictonnary comprehension
		comprehensions are a quick way for us to create list or set or dict in python instead of perhaps looping
		
		examples:
			comprehension = [expression for item in iterable if condition]
			 
			li1 = [char for char in 'hello']
			li2 = [num**2 for num in range(100)]
			li3 = [num for num in range(100) if num%2==0]
			#for set comprehension, like for list one, just change [] by {}
			
			simple_dict={'a':1, 'b':2}
			di1 = { key:value for key,value in simple_dict if value%2==0 }
			di2 = { num:num*2 for num in [1,2,3] }
			
			how to use comprehension to return a list of duplicated ones:
				data = ['a', 'b', 'c', 'b', 'm', 'n', 'n']
				duplicates = list({ item for item in data if data.count(item)>1 })
				
	
	Index of terms:
		Functional Programming
		Pure Functions
		Comprehensions